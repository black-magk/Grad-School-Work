

/*problem 1 */

/* Load Script */

vgame = LOAD '/media/sf_FilesFromHDFS/VideoGameSales.txt' as (Name:chararray, Platform:int, Year:int, Genre:chararray, Publisher:chararray, NASALES:float, EUSALES:float, JPSALES:float, OSALES:float);


/* add column for totalsales */

F = FOREACH vgame GENERATE *, NASALES+EUSALES+JPSALES+OSALES AS totalsales:float ;

/* select specific columns */



G = FOREACH F GENERATE Name, totalsales;

/* ordering G DESC */

orderedsales = ORDER G by totalsales DESC;


/*problem 2 */


/* locate column of movie names */

H = FOREACH F GENERATE Name;


/* filter vgame names that include "sport" */

sportfilter = filter H by (Name matches '.*sport.*');

/* order sportfilter ASC */

orderedsports = ORDER sportfilter by Name ASC;

/* problem 3 */


I = FOREACH F GENERATE Name, Year, totalsales;

/*2011 */

year_2011 = filter I by Year == 2011;

ordered_year_2011 = ORDER year_2011 by totalsales DESC;

top3_2011 = LIMIT ordered_year_2011 3; 

/*2012 */

year_2012 = filter I by Year == 2012;

ordered_year_2012 = ORDER year_2012 by totalsales DESC;

top3_2012 = LIMIT ordered_year_2012 3; 

/*2013 */

year_2013 = filter I by Year == 2013;

ordered_year_2013 = ORDER year_2013 by totalsales DESC;

top3_2013 = LIMIT ordered_year_2013 3; 

/*2014 */

year_2014 = filter I by Year == 2014;

ordered_year_2014 = ORDER year_2014 by totalsales DESC;

top3_2014 = LIMIT ordered_year_2014 3; 

/*2015 */

year_2015 = filter I by Year == 2015;

ordered_year_2015 = ORDER year_2015 by totalsales DESC;

top3_2015 = LIMIT ordered_year_2015 3; 


/* final output combined */

task_3_output = UNION ONSCHEMA top3_2011, top3_2012, top3_2013, top3_2014, top3_2015;

/* final output combined to fix 2015 problem */


ordered_task_3_output = ORDER task_3_output by Year,totalsales DESC;


/*problem 4 */



J = FOREACH F GENERATE Name;


/* break it up the title into individual words */

K = foreach J generate TOKENIZE(Name) as singleword;


L = foreach K generate flatten(singleword) as oneWord;

/* strip to lowercase */


M = foreach L generate LOWER(oneWord) as wordUC;

N = foreach M generate FLATTEN(REGEX_EXTRACT_ALL(wordUC, '.*?([a-zà-ÿ]+).*?')) as justWords;


/*begin to group the words */

gw = group N by justWords;

/* add a count*/

sumw = foreach gw generate FLATTEN((chararray)group), COUNT(N.justWords) as sumword;

sumord = order sumw by sumword DESC;


/* filter based on greater than 100 */

sumord_100 = filter sumord by sumword > 100;












