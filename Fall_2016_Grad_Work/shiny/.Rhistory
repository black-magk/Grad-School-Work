# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
rsconnect::setAccountInfo(name='testone',token='B315ADC1AE5681C75572F4B7AE060D03',secret='t6J5VhevgKcdY1bKTnQvfbNONAZpQsZPzw2Fvdxc')
library(shiny)
library(ggplot2)
library(rsconnect)
dataset <- read.csv('Shiny_book.csv')
# Define UI for application that draws a histogram
ui <- shinyUI(pageWithSidebar(
headerPanel("Drink Views"),
sidebarPanel(
sliderInput('sampleSize', 'Observed Sample Selection', min=1, max=nrow(dataset),
value=min(1, nrow(dataset)), step=1, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
mainPanel(
plotOutput('plot')
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
dataset <- reactive({
Shiny_book[sample(nrow(Shiny_book), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
print(p)
}, height=700)
})
# Run the application
deployApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggplot2)
library(rsconnect)
dataset <- read.csv('Shiny_book.csv')
# Define UI for application that draws a histogram
ui <- shinyUI(pageWithSidebar(
headerPanel("Drink Views"),
sidebarPanel(
sliderInput('sampleSize', 'Observed Sample Selection', min=1, max=nrow(dataset),
value=min(1, nrow(dataset)), step=1, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
mainPanel(
plotOutput('plot')
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
dataset <- reactive({
Shiny_book[sample(nrow(Shiny_book), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
print(p)
}, height=700)
})
# Run the application
deployApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggplot2)
library(rsconnect)
dataset <- read.csv('Shiny_book.csv')
# Define UI for application that draws a histogram
ui <- shinyUI(pageWithSidebar(
headerPanel("Drink Views"),
sidebarPanel(
sliderInput('sampleSize', 'Observed Sample Selection', min=1, max=nrow(dataset),
value=min(1, nrow(dataset)), step=1, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
mainPanel(
plotOutput('plot')
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
dataset <- reactive({
Shiny_book[sample(nrow(Shiny_book), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
print(p)
}, height=700)
})
# Run the application
runApp()
getwd()
setwd('/users/landon/desktop')
runApp('shiny')
library(shiny)
library(ggplot2)
library(rsconnect)
dataset <- read.csv('Shiny_book.csv')
ui <- shinyUI(pageWithSidebar(
headerPanel("Drink Views"),
sidebarPanel(
sliderInput('sampleSize', 'Observed Sample Selection', min=1, max=nrow(dataset),
value=min(1, nrow(dataset)), step=1, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
mainPanel(
plotOutput('plot')
)
))
server <- shinyServer(function(input, output) {
dataset <- reactive({
Shiny_book[sample(nrow(Shiny_book), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
print(p)
}, height=700)
})
shinyApp(ui = ui, server = server)
runApp()
runApp('shiny')
Shiny_book <- read.csv("~/Desktop/shiny/Shiny_book.csv")
View(Shiny_book)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Define UI for application that draws a histogram
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggplot2)
library(rsconnect)
Shiny_book = read.csv("Shiny_book.csv")
# Define UI for application that draws a histogram
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
dataset <- reactive({
Shiny_book[sample(nrow(Shiny_book), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
print(p)
}, height=700)
})
# Run the application
runApp()
runApp("shiny")
deployApp('shiny')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Define UI for application that draws a histogram
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggplot2)
library(rsconnect)
dataset = read.csv("Shiny_book.csv")
# Define UI for application that draws a histogram
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
dataset <- reactive({
Shiny_book[sample(nrow(Shiny_book), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
print(p)
}, height=700)
})
# Run the application
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Define UI for application that draws a histogram
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggplot2)
library(rsconnect)
dataset = read.csv("Shiny_book.csv")
# Define UI for application that draws a histogram
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
dataset <- reactive({
Shiny_book[sample(nrow(Shiny_book), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
print(p)
}, height=700)
})
# Run the application
runapp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Define UI for application that draws a histogram
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggplot2)
library(rsconnect)
dataset = read.csv("Shiny_book.csv")
# Define UI for application that draws a histogram
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
dataset <- reactive({
Shiny_book[sample(nrow(Shiny_book), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
print(p)
}, height=700)
})
# Run the application
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Define UI for application that draws a histogram
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggplot2)
library(rsconnect)
dataset = read.csv("Shiny_book.csv")
# Define UI for application that draws a histogram
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
dataset <- reactive({
Shiny_book[sample(nrow(Shiny_book), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
print(p)
}, height=700)
})
# Run the application
runApp('Shiny')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Define UI for application that draws a histogram
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggplot2)
library(rsconnect)
dataset = read.csv("Shiny_book.csv")
# Define UI for application that draws a histogram
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
dataset <- reactive({
Shiny_book[sample(nrow(Shiny_book), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
print(p)
}, height=700)
})
# Run the application
deployApp('Shiny')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Define UI for application that draws a histogram
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggplot2)
library(rsconnect)
Shiny_book = read.csv("Shiny_book.csv")
# Define UI for application that draws a histogram
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$plot <- renderPlot({
p <- ggplot(Shiny_book[sample(nrow(Shiny_book), input$sampleSize),], aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
print(p)
}, height=700)
})
# Run the application
deployApp('Shiny')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Define UI for application that draws a histogram
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggplot2)
library(rsconnect)
Shiny_book = read.csv("Shiny_book.csv")
# Define UI for application that draws a histogram
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$plot <- renderPlot({
p <- ggplot(Shiny_book[sample(nrow(Shiny_book), input$sampleSize),], aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
print(p)
}, height=700)
})
# Run the application
runApp('Shiny')
deployApp('Shiny')
deployApp('shiny')
