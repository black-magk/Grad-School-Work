Head(CDNow.summary.all)
head(CDNow.summary.all)
CDNow.summary.all<-merge(CDNow.summary.calibration, CDNow.summary.validation, by = "ID", all.x = TRUE)
CDNow.summary.all$retained<-as.numeric(!is.na(CDNow.summary.all$monetary.val))
head(CDNow.summary.all)
CDNow.summary.validation
library(dplyr)
CDNow.summary.all$monetaryquantile <- ntile(CDNow.summary.all$monetary.cal,10)
head(CDNow)
CDNow.summary.all$monetaryquantile
CDNow.summary.all$monetary.cal
monetary.quantile.summary<-aggregate(CDNow.summary.all$retained, by = list(CDNow.summary.all$monetaryquantile), FUN = mean)
monetary.quantile.summary
colnames(monetary.quantile.summary)<-c("quantile","retention.percentage")
monetary.quantile.summary$n<-table(CDNow.summary.all$monetaryquantile)
monetary.quantile.summary$n
monetary.quantile.summary$n<-table(CDNow.summary.all$monetaryquantile)
monetary.quantile.summary$n
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$retention.percentage, type="l")
plot(monetary.quantile.summary)
a<-plot(monetary.quantile.summary)
a
a<-plot(monetary.quantile.summary)
plot(monetary.quantile.summary)
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$retention.percentage, type="l")
plot(monetary.quantile.summary)
plot(monetary.quantile.summary)
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$retention.percentage, type="l")
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$retention.percentage, type="l")
recency.quantile.summary<-aggregate(CDNow.summary.all$retained, by = list(CDNow.summary.all$recencyquantile), FUN = mean)
recency.quantile.summary
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l")
recency.quantile.summary$n<-table(CDNow.summary.all$recencyquantile)
plot(recency.quantile.summary$quantile, recency.quantile.summary$retention.percentage, type="l")
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$retention.percentage, type="l")
plot(recency.quantile.summary$quantile, recency.quantile.summary$retention.percentage, type="l")
overall.responserate<-mean(CDNow.summary.all$retained)
overall.responserate
monetary.quantile.summary<-monetary.quantile.summary[order(-monetary.quantile.summary$quantile),]
monetary.quantile.summary
monetary.quantile.summary<-monetary.quantile.summary[order(-monetary.quantile.summary$quantile),]
monetary.quantile.summary$cum.n<-cumsum(monetary.quantile.summary$n)
monetary.quantile.summary$cum.n
monetary.quantile.summary<-monetary.quantile.summary[order(-monetary.quantile.summary$quantile),]
monetary.quantile.summary
plot(-monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", )
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", lwd=5, xlab="monetary quantile", ylab="cumulative lift",ylim=c(1,3), xlim=rev(range(monetary.quantile.summary$quantile)))
plot(-monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", )
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", lwd=5, xlab="monetary quantile", ylab="cumulative lift",ylim=c(1,3), xlim=rev(range(monetary.quantile.summary$quantile)))
abline(1,0, col="red", lwd=5)
recency.quantile.summary$cum.n<-cumsum(recency.quantile.summary$n)
recency.quantile.summary$cum.n
recency.quantile.summary$n.retained
monetary.quantile.summary$cumlift
plot(-monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", )
monetary.quantile.summary<-monetary.quantile.summary[order(-monetary.quantile.summary$quantile),]
monetary.quantile.summary$cum.n<-cumsum(monetary.quantile.summary$n)
monetary.quantile.summary$n.retained<-monetary.quantile.summary$n*monetary.quantile.summary$retention.percentage
monetary.quantile.summary$cum.n.retained<-cumsum(monetary.quantile.summary$n.retained)
monetary.quantile.summary$cumlift<-(monetary.quantile.summary$cum.n.retained/monetary.quantile.summary$cum.n)/overall.responserate
plot(-monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", )
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", lwd=5, xlab="monetary quantile", ylab="cumulative lift",ylim=c(1,3), xlim=rev(range(monetary.quantile.summary$quantile)))
plot(-monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", )
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", lwd=5, xlab="monetary quantile", ylab="cumulative lift",ylim=c(1,3), xlim=rev(range(monetary.quantile.summary$quantile)))
monetary.quantile.summary$n
monetary.quantile.summary$n
monetary.quantile.summary$retention.percentage
monetary.quantile.summary$n.retained
monetary.quantile.summary$cum.n.retained
monetary.quantile.summary$n.retained
monetary.quantile.summary$cum.n
overall.responserate
plot(-monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", )
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", lwd=5, xlab="monetary quantile", ylab="cumulative lift",ylim=c(1,3), xlim=rev(range(monetary.quantile.summary$quantile)))
plot(-monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", )
monetary.quantile.summary$n
monetary.quantile.summary$n.retained<-monetary.quantile.summary$n*monetary.quantile.summary$retention.percentage
monetary.quantile.summary$n.retained
monetary.quantile.summary<-aggregate(CDNow.summary.all$retained, by = list(CDNow.summary.all$monetaryquantile), FUN = mean)
monetary.quantile.summary
monetary.quantile.summary$n<-table(CDNow.summary.all$monetaryquantile)
monetary.quantile.summary$n
colnames(monetary.quantile.summary)<-c("quantile","retention.percentage")
monetary.quantile.summary
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$retention.percentage, type="l")
monetary.quantile.summary<-monetary.quantile.summary[order(-monetary.quantile.summary$quantile),]
monetary.quantile.summary
overall.responserate<-mean(CDNow.summary.all$retained)
overall.responserate
monetary.quantile.summary<-monetary.quantile.summary[order(-monetary.quantile.summary$quantile),]
monetary.quantile.summary
monetary.quantile.summary<-monetary.quantile.summary[order(-monetary.quantile.summary$quantile),]
monetary.quantile.summary$cum.n<-cumsum(monetary.quantile.summary$n)
monetary.quantile.summary$cum.n
monetary.quantile.summary$cum.n<-cumsum(monetary.quantile.summary$n)
monetary.quantile.summary$n<-table(CDNow.summary.all$monetaryquantile)
monetary.quantile.summary$cum.n<-cumsum(monetary.quantile.summary$n)
monetary.quantile.summary$n
monetary.quantile.summary$cum.n<-cumsum(monetary.quantile.summary$n)
monetary.quantile.summary$cum.n
monetary.quantile.summary$n<-table(CDNow.summary.all$monetaryquantile)
monetary.quantile.summary$n
monetary.quantile.summary$cum.n<-cumsum(monetary.quantile.summary$n)
monetary.quantile.summary$cum.n
monetary.quantile.summary<-monetary.quantile.summary[order(-monetary.quantile.summary$quantile),]
monetary.quantile.summary$n<-table(CDNow.summary.all$monetaryquantile)
monetary.quantile.summary$cum.n
monetary.quantile.summary$n.retained
monetary.quantile.summary$n.retained<-monetary.quantile.summary$n*monetary.quantile.summary$retention.percentage
monetary.quantile.summary$n.retained
monetary.quantile.summary$cumlift<-(monetary.quantile.summary$cum.n.retained/monetary.quantile.summary$cum.n)/overall.responserate
monetary.quantile.summary$cumlift
monetary.quantile.summary$cum.n.retained<-cumsum(monetary.quantile.summary$n.retained)
monetary.quantile.summary$cumlift<-(monetary.quantile.summary$cum.n.retained/monetary.quantile.summary$cum.n)/overall.responserate
monetary.quantile.summary$cumlift
plot(-monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", )
plot(monetary.quantile.summary$quantile, monetary.quantile.summary$cumlift, type="l", lwd=5, xlab="monetary quantile", ylab="cumulative lift",ylim=c(1,3), xlim=rev(range(monetary.quantile.summary$quantile)))
abline(1,0, col="red", lwd=5)
CDNow.linearfit <-lm(retained ~ recency + frequency.cal + monetary.cal, data=CDNow.summary.all)
summary(CDNow.linearfit)
CDNow.summary.all$linearfit <- predict(CDNow.linearfit, type="response")
hist(CDNow.summary.all$linearfit)
CDNow.summary.all$linearfit
plot(CDNow.summary.all$monetary.cal,CDNow.summary.all$linearfit)
plot(CDNow.summary.all$frequency.cal,CDNow.summary.all$linearfit)
plot(CDNow.summary.all$monetary.cal,CDNow.summary.all$linearfit)
monetary.cal
CDNow.logisticfit <- glm(retained ~ recency + frequency.cal + monetary.cal, data=CDNow.summary.all, family =binomial(link = "logit"))
CDNow.linearfit <-lm(retained ~ recency + frequency.cal + monetary.cal, data=CDNow.summary.all)
summary(CDNow.linearfit)
CDNow.summary.all$linearfit <- predict(CDNow.linearfit, type="response")
hist(CDNow.summary.all$linearfit)
plot(CDNow.summary.all$monetary.cal,CDNow.summary.all$linearfit)
plot(CDNow.summary.all$frequency.cal,CDNow.summary.all$linearfit)
plot(CDNow.summary.all$recency,CDNow.summary.all$linearfit)
CDNow.logisticfit <- glm(retained ~ recency + frequency.cal + monetary.cal, data=CDNow.summary.all, family =binomial(link = "logit"))
summary(CDNow.logisticfit)
CDNow.logisticfit <- glm(retained ~ recency + frequency.cal + monetary.cal, data=CDNow.summary.all, family =binomial(link = "logit"))
summary(CDNow.logisticfit)
CDNow.summary.all$logisticfit <- predict(CDNow.logisticfit,type="response")
hist(CDNow.summary.all$logisticfit)
plot(CDNow.summary.all$monetary.cal,CDNow.summary.all$logisticfit)
plot(CDNow.summary.all$frequency.cal,CDNow.summary.all$logisticfit)
plot(CDNow.summary.all$recency,CDNow.summary.all$logisticfit)
CDNow.summary.all$logisticquantile <- ntile(CDNow.summary.all$logisticfit,10)
CDNow.summary.all$logisticquantile
CDNow.summary.all$retained
CDNow.summary.all
logistic.quantile.summary<-aggregate(CDNow.summary.all$retained, by = list(CDNow.summary.all$logisticquantile), FUN = mean)
colnames(logistic.quantile.summary)<-c("quantile","retention.percentage")
logistic.quantile.summary
logistic.quantile.summary$n<-table(CDNow.summary.all$logisticquantile)
logistic.quantile.summary$n
plot(logistic.quantile.summary$quantile, logistic.quantile.summary$retention.percentage, type="l")
logistic.quantile.summary<-logistic.quantile.summary[order(-logistic.quantile.summary$quantile),]
logistic.quantile.summary
logistic.quantile.summary$cum.n<-cumsum(logistic.quantile.summary$n)
logistic.quantile.summary$cum.n
logistic.quantile.summary$n.retained<-logistic.quantile.summary$n*logistic.quantile.summary$retention.percentage
logistic.quantile.summary$n.retained
logistic.quantile.summary$cum.n.retained<-cumsum(logistic.quantile.summary$n.retained)
logistic.quantile.summary$cum.n.retained
logistic.quantile.summary$cumlift<-(logistic.quantile.summary$cum.n.retained/logistic.quantile.summary$cum.n)/overall.responserate
plot(logistic.quantile.summary$quantile, logistic.quantile.summary$cumlift, type="l", lwd=5, xlab="quantile", ylab="cumulative lift",ylim=c(1,3), xlim=rev(range(logistic.quantile.summary$quantile)))
abline(1,0, col="red", lwd=5)
overall.responserate<-mean(CDNow.summary.all$retained)
# create frame that orders by quantile
monetary.quantile.summary<-monetary.quantile.summary[order(-monetary.quantile.summary$quantile),]
monetary.quantile.summary$n<-table(CDNow.summary.all$monetaryquantile)
monetary.quantile.summary$cum.n<-cumsum(monetary.quantile.summary$n)
CDNow.summary.all$logisticquantile <- ntile(CDNow.summary.all$logisticfit,10)
CDNow.summary.all$logisticquantile
CDNow.summary.all$logisticfit
choose.file()
file.choose()
education<-read.csv("/Users/landon/Desktop/customer final code/educational service long.csv")
education
education2<-education[which(education$cancelnow==0),]
education2
head(education2)
functions<-aggregate(cancelnow ~ time, data = education2, FUN = length)
functions
head(education2)
education2
functions<-aggregate(cancelnow ~ time, data = education2, FUN = length)
functions
education$custid
functions$PercAlive <- functions$cancelnow/length(unique(education$custid))
functions$Hazard[1]<-1-(functions$cancelnow[1]/length(unique(education$custid)))
functions$Hazard[1]
for (i in 2:11){
functions$Hazard[i] <- 1-(functions$PercAlive[i]/functions$PercAlive[i-1])
}
functions$Hazard[1]
plot(1,type='n',xlim=c(0,12),ylim=c(0,1),xlab='TIME', ylab='PERCENT SURVIVORS')
lines(functions$time[1:11], functions$PercAlive[1:11], type="o", col="blue", lwd=1)
functions
education$custid
for (i in 2:11){
functions$Hazard[i] <- 1-(functions$PercAlive[i]/functions$PercAlive[i-1])
}
plot(1,type='n',xlim=c(0,12),ylim=c(0,1),xlab='TIME', ylab='PERCENT SURVIVORS')
lines(functions$time[1:11], functions$PercAlive[1:11], type="o", col="blue", lwd=1)
plot(1,type='n',xlim=c(0,12),ylim=c(0,0.4),xlab='TIME', ylab='DEFECTION LIKELIHOOD')
lines(functions$time[1:11], functions$Hazard[1:11], type="o", col="blue", lwd=1)
lines(functions$time[1:11], functions$PercAlive[1:11], type="o", col="blue", lwd=1)
plot(1,type='n',xlim=c(0,12),ylim=c(0,1),xlab='TIME', ylab='PERCENT SURVIVORS')
lines(functions$time[1:11], functions$PercAlive[1:11], type="o", col="blue", lwd=1)
lines(functions$time[1:11], functions$Hazard[1:11], type="o", col="blue", lwd=1)
logit1 <- glm(cancelnow ~ time,  data=education, family=binomial(link = logit))
summary(logit1)
functions$HazardLogit1 <- predict(logit1, functions, type="response")
plot(1,type='n',xlim=c(0,12),ylim=c(0,0.4),xlab='TIME', ylab='DEFECTION LIKELIHOOD')
lines(functions$time[1:11], functions$Hazard[1:11], type="o", col="blue", lwd=1)
lines(functions$time[1:11], functions$HazardLogit1[1:11], type="o", col="red", lwd=1)
education$time6 <- ifelse(education$time==6, 1,0)
logit2 <- glm(cancelnow ~ time + time6,  data=education, family=binomial(link = logit))
summary(logit2)
functions$time6 <- ifelse(functions$time==6, 1,0)
functions$HazardLogit2 <- predict(logit2, functions, type="response")
# alternatively you can do the prediction at each customer-time level and average by time period
#education$predict <- predict(logit2, education, type="response")
#education <- as.data.table(education)
#education_agg <- education[, list(predictprob=mean(predict)), by=time]
plot(1,type='n',xlim=c(0,12),ylim=c(0,0.4),xlab='TIME', ylab='DEFECTION LIKELIHOOD')
lines(functions$time[1:11], functions$Hazard[1:11], type="o", col="blue", lwd=1)
lines(functions$time[1:11], functions$HazardLogit1[1:11], type="o", col="red", lwd=1)
lines(functions$time[1:11], functions$HazardLogit2[1:11], type="o", col="orange", lwd=1)
#plot out the predicted hazard rate using the alternative method in line 43
#lines(education_agg$time[1:11], education_agg$predictprob[1:11], type="o", col="green", lwd=1)
education$predict <- predict(logit2, education, type="response")
education <- as.data.table(education)
education_agg <- education[, list(predictprob=mean(predict)), by=time]
choose.file()
file.choose()
education<-read.csv("/Users/landon/Desktop/customer final code/educational service long.csv")
head(education)
education.startlen1 <- subset(education, startlen==1)
education2.startlen1 <- education.startlen1[which(education.startlen1$cancelnow==0),]
education2.startlen1
startlen1<-aggregate(cancelnow ~ time, data = education2.startlen1, FUN = length)
startlen1
head(startlen1)
education.startlen1
head(education)
startlen1<-aggregate(cancelnow ~ time, data = education2.startlen1, FUN = length)
startlen1$PercAlive <- startlen1$cancelnow/length(unique(education.startlen1$custid))
startlen1$PercAlive
startlen1$Hazard <- seq(1,11,1)
startlen1$Hazard
for (i in 2:11){
startlen1$Hazard[i] <- 1-(startlen1$PercAlive[i]/startlen1$PercAlive[i-1])
}
startlen1$Hazard[i]
startlen1$Hazard[i]
head(startlen1)
startlen1$Hazard[1]<-1-(startlen1$cancelnow[1]/length(unique(education.startlen1$custid)))
head(startlen1)
education.startlen6 <- subset(education, startlen==6)
education2.startlen6 <- education.startlen6[which(education.startlen6$cancelnow==0),]
startlen6<-aggregate(cancelnow ~ time, data = education2.startlen6, FUN = length)
startlen6$PercAlive <- startlen6$cancelnow/length(unique(education.startlen6$custid))
startlen6$Hazard <- seq(1,11,1)
for (i in 2:11){
startlen6$Hazard[i] <- 1-(startlen6$PercAlive[i]/startlen6$PercAlive[i-1])
}
startlen6$Hazard[1]<-1-(startlen6$cancelnow[1]/length(unique(education.startlen6$custid)))
startlen6$Hazard
education.startlen12 <- subset(education, startlen==12)
education2.startlen12 <- education.startlen12[which(education.startlen12$cancelnow==0),]
startlen12<-aggregate(cancelnow ~ time, data = education2.startlen12, FUN = length)
startlen12$PercAlive <- startlen12$cancelnow/length(unique(education.startlen12$custid))
startlen12$Hazard <- seq(1,11,1)
for (i in 2:11){
startlen12$Hazard[i] <- 1-(startlen12$PercAlive[i]/startlen12$PercAlive[i-1])
}
startlen12$Hazard[1]<-1-(startlen12$cancelnow[1]/length(unique(education.startlen12$custid)))
plot(1,type='n',xlim=c(0,12),ylim=c(0,1),xlab='TIME', ylab='PERCENT SURVIVORS')
lines(startlen1$time[1:11], startlen1$PercAlive[1:11], type="o", col="blue", lwd=1)
lines(startlen6$time[1:11], startlen6$PercAlive[1:11], type="o", col="red", lwd=1)
lines(startlen12$time[1:11], startlen12$PercAlive[1:11], type="o", col="orange", lwd=1)
#Hazard Functions
plot(1,type='n',xlim=c(0,12),ylim=c(0,0.4),xlab='TIME', ylab='DEFECTION LIKELIHOOD')
lines(startlen1$time[1:11], startlen1$Hazard[1:11], type="o", col="blue", lwd=1)
lines(startlen6$time[1:11], startlen6$Hazard[1:11], type="o", col="red", lwd=1)
lines(startlen12$time[1:11], startlen12$Hazard[1:11], type="o", col="orange", lwd=1)
lines(startlen1$time[1:11], startlen1$Hazard[1:11], type="o", col="blue", lwd=1)
lines(startlen6$time[1:11], startlen6$Hazard[1:11], type="o", col="red", lwd=1)
lines(startlen12$time[1:11], startlen12$Hazard[1:11], type="o", col="orange", lwd=1)
lines(startlen1$time[1:11], startlen1$PercAlive[1:11], type="o", col="blue", lwd=1)
lines(startlen6$time[1:11], startlen6$PercAlive[1:11], type="o", col="red", lwd=1)
lines(startlen12$time[1:11], startlen12$PercAlive[1:11], type="o", col="orange", lwd=1)
education$startlen.c<-as.factor(education$startlen)
education$startlen.c
education$dummy.startlen6.time6 <- ifelse(education$time==6 & education$startlen==6,1,0)
education$dummy.startlen6.time6
logit.stable <- glm(cancelnow ~  time + startlen.c + time:startlen.c + dummy.startlen6.time6,  data=education, family=binomial(link = logit))
summary(logit.stable)
time <- seq(1,11,1)
time
startlen.c <- c("1","6","12")
dummy.startlen6.time6 <- 0
visuals.stable<-expand.grid(time,startlen.c,dummy.startlen6.time6)
visuals.stable
colnames(visuals.stable)<-c("time","startlen.c","dummy.startlen6.time6")
visuals.stable
visuals.stable$dummy.startlen6.time6 <- ifelse(visuals.stable$time==6 & visuals.stable$startlen==6,1,0)
visuals.stable
visuals.stable$hazard.predictions <- predict(logit.stable, visuals.stable, type="response")
plot(1,type='n',xlim=c(0,12),ylim=c(0,0.4),xlab='TIME', ylab='DEFECTION LIKELIHOOD')
lines(startlen1$time[1:11], startlen1$Hazard[1:11], type="o", col="blue", lwd=1)
lines(startlen6$time[1:11], startlen6$Hazard[1:11], type="o", col="red", lwd=1)
lines(startlen12$time[1:11], startlen12$Hazard[1:11], type="o", col="orange", lwd=1)
lines(visuals.stable$time[1:11], visuals.stable$hazard.predictions[1:11], type="o", col="blue", lwd=4)
lines(visuals.stable$time[12:22], visuals.stable$hazard.predictions[12:22], type="o", col="red", lwd=4)
lines(visuals.stable$time[23:33], visuals.stable$hazard.predictions[23:33], type="o", col="orange", lwd=4)
education.startlen6$lagnotest <- ifelse(education.startlen6$lagtest==0,1,0)
education.startlen6$contractup <- ifelse(education.startlen6$payleft==0,1,0)
education.startlen6$testsassigned<-4
education.startlen6$cumtestsassigned<-ave(education.startlen6$testsassigned,education.startlen6$custid,FUN=cumsum)
education.startlen6$cumlagtest<-ave(education.startlen6$lagtest,education.startlen6$custid,FUN=cumsum)
education.startlen6$propcumlagtest<- education.startlen6$cumlagtest/education.startlen6$cumtestsassigned
logit.triggers <- glm(cancelnow ~  time + propcumlagtest + lagnotest + contractup,  data=education.startlen6, family=binomial(link = logit))
summary(logit.triggers)
time <- seq(1,11,1)
lagnotest <- c(0,1)
contractup <- c(0,1)
propcumlagtest <- c(0.70,1)
visuals.triggers<-expand.grid(time,lagnotest,contractup,propcumlagtest)
colnames(visuals.triggers)<-c("time","lagnotest","contractup","propcumlagtest")
visuals.triggers$hazard.predictions <- predict(logit.triggers, visuals.triggers, type="response")
#contract up & perfect effort vs. contract up & imperfect effort
plot(1,type='n',xlim=c(0,12),ylim=c(0,0.1),xlab='TIME', ylab='DEFECTION LIKELIHOOD')
lines(visuals.triggers$time[23:33], visuals.triggers$hazard.predictions[23:33], type="o", col="blue", lwd=1)
lines(visuals.triggers$time[67:77], visuals.triggers$hazard.predictions[67:77], type="o", col="red", lwd=1)
education.startlen6$lagnotest
education.startlen6
head(education.startlen6)
education<-read.csv("/Users/landon/Desktop/customer final code/educational service long.csv")
head(education)
plot(1,type='n',xlim=c(0,12),ylim=c(0,0.1),xlab='TIME', ylab='DEFECTION LIKELIHOOD')
lines(visuals.triggers$time[23:33], visuals.triggers$hazard.predictions[23:33], type="o", col="blue", lwd=1)
lines(visuals.triggers$time[67:77], visuals.triggers$hazard.predictions[67:77], type="o", col="red", lwd=1)
file.choose()
all.raw<-read.csv("/Users/landon/Desktop/customer final code/movie viewing data for students binary.csv")
all.raw<-read.csv("/Users/landon/Desktop/customer final code/movie viewing data for students binary.csv")
all.clean<-all.raw[complete.cases(all.raw),] #casewise deletion of missing data
all.clean
length(rownames(all.raw))-length(rownames(all.clean)) #43 cases removed
movies<-all.clean[,2:51] #create dataset with clustering variables only (i.e., all seen_xxx variables)
demos<-all.clean[,52:57] #create dataset with demographics only
overall.proportions<-sort(colMeans(movies),decreasing=TRUE)  #create matrix with proportion of views for each movie
overall.proportions
head(all.clean)
head(all.clean)
overall.proportions<-sort(colMeans(movies),decreasing=TRUE)
head(all.clean)
overall.proportions<-sort(colMeans(movies),decreasing=TRUE)  #create matrix with proportion of views for each movie
barplot(overall.proportions, names.arg=names(overall.proportions),las=2, ylim=0:1)
sort(rowMeans(movies)) #no one watched 0 movies, 3 watched 2 movies, 1 watched all movies
mean(rowMeans(movies)) #Average person watched 38% of movies
median(rowMeans(movies))#Median person watched 36% of movies
hist(rowMeans(movies),breaks=10,xlab="Proportion of Movies Watched", main="Histogram of % Movies Watched")
movies<-scale(movies,center=TRUE,scale=TRUE)
movies
wss<-c()
max.clusters<-25
for (i in 1:max.clusters) wss[i] <- sum(kmeans(movies, centers=i)$withinss)
wss<-c()
for (i in 1:max.clusters) wss[i] <- sum(kmeans(movies, centers=i)$withinss)
wss
plot(1:25, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
num.clusters<-4
set.seed (12345)
movies.k4<-kmeans(movies, num.clusters,nstart=50)
movies.k4
k4.means<-t(aggregate(movies,by=list(movies.k4$cluster),FUN=mean)) #Create dataset with cluster means
k4.means
k4.means<-k4.means[-c(1), ]
k4.means
colMeans(k4.means)
colMeans
movies.k4$size
k4.means[order(-k4.means[,3]),] #Cluster 3 has seen 72% of movies. These are heavy watchers. Small cluster.
movies.k4$size
k4.means[order(-k4.means[,3]),]
k4.means[order(-k4.means[,3]),]
movies.k4$size
k4.means[order(-k4.means[,2]),] #Cluster 2 has seen 30% of movies, mostly fantasy/sci-fi
k4.means[order(-k4.means[,1]),] #Cluster 1 has seen 23% of movies, mostly drama/crime
demos$cluster1 <- ifelse(movies.k4$cluster==1,1,0)
k4.means[order(-k4.means[,3]),]
k4.means<-t(aggregate(movies,by=list(movies.k4$cluster),FUN=mean)) #Create dataset with cluster means
k4.means
k4.means<-(aggregate(movies,by=list(movies.k4$cluster),FUN=mean)) #Create dataset with cluster means
k4.means
k4.means<-t(aggregate(movies,by=list(movies.k4$cluster),FUN=mean)) #Create dataset with cluster means
k4.means<-k4.means[-c(1), ]
k4.means
colMeans(k4.means)
demos$cluster1 <- ifelse(movies.k4$cluster==1,1,0)
demos$cluster2 <- ifelse(movies.k4$cluster==2,1,0)
demos$cluster3 <- ifelse(movies.k4$cluster==3,1,0)
demos$cluster4 <- ifelse(movies.k4$cluster==4,1,0)
#Summary statistics by cluster
aggregate(demos[,1:6],by=demos[,7:10],FUN=summary)
logit1 <- glm(cluster1 ~ age + edu + income + gender + white.nonwhite,  data=demos, family=binomial(link = logit))
summary(logit1)
demos$cluster1prob <- predict(logit1, demos, type="response") #cluster 1 tends to be older
logit2 <- glm(cluster2 ~ age + edu + income + gender + white.nonwhite,  data=demos, family=binomial(link = logit))
summary(logit2)
demos$cluster2prob <- predict(logit2, demos, type="response") #cluster 2 tends to be younger, and female
logit3 <- glm(cluster3 ~ age + edu + income + gender + white.nonwhite,  data=demos, family=binomial(link = logit))
summary(logit3)
demos$cluster4prob <- predict(logit3, demos, type="response") #cluster 3 tends to have higher income
logit4 <- glm(cluster4 ~ age + edu + income + gender + white.nonwhite,  data=demos, family=binomial(link = logit))
summary(logit4)
demos$cluster4prob <- predict(logit4, demos, type="response") #cluster 4 tends to be male
### BONUS: SPHERICAL K-MEANS (COSINE DISTANCE) ###
k4.means[order(-k4.means[,3]),]
ncol(k4.means[order(-k4.means[,3]),]) #Cluster 3 has seen 72% of movies. These are heavy watchers. Small cluster.
nrow(k4.means[order(-k4.means[,3]),]) #Cluster 3 has seen 72% of movies. These are heavy watchers. Small cluster.
nrow(k4.means[order(-k4.means[,2]),]) #Cluster 2 has seen 30% of movies, mostly fantasy/sci-fi
aggregate(demos[,1:6],by=demos[,7:10],FUN=summary)
movies.k4<-kmeans(movies, num.clusters,nstart=50)
movies.k4
size(movies.k4)
k4.means<-t(aggregate(movies,by=list(movies.k4$cluster),FUN=mean)) #Create dataset with cluster means
k4.means<-k4.means[-c(1), ]
colMeans(k4.means)
movies.k4$size
nrow(k4.means[order(-k4.means[,3]),]) #Cluster 3 has seen 72% of movies. These are heavy watchers. Small cluster.
nrow(k4.means[order(-k4.means[,2]),]) #Cluster 2 has seen 30% of movies, mostly fantasy/sci-fi
k4.means[order(-k4.means[,1]),] #Cluster 1 has seen 23% of movies, mostly drama/crime
k4.means[order(-k4.means[,4]),] #Cluster 4 has seen 49% of movies. Not seen many recent movies.
### PART 4 ###
demos$cluster1 <- ifelse(movies.k4$cluster==1,1,0)
demos$cluster2 <- ifelse(movies.k4$cluster==2,1,0)
demos$cluster3 <- ifelse(movies.k4$cluster==3,1,0)
demos$cluster4 <- ifelse(movies.k4$cluster==4,1,0)
z<-k4.means[order(-k4.means[,1]),]
z#Cluster 1 has seen 23% of movies, mostly drama/crime
nrow(z)#Cluster 1 has seen 23% of movies, mostly drama/crime
file.choose()
install.packages('proxy')
library(proxy)
d<-read.csv("/Users/landon/Desktop/customer final code/movie ratings 2017.csv")
head(d)
collab.filter(d,recommend.for="AndrewLong", type="user", distance="correlation", num.neighbors=9, num.recommendations=5, user.col="id", minkowski.r=NULL, adjusted.ratings=F)
install.packages('collab.filter')
hist(rowMeans(movies),breaks=10,xlab="Proportion of Movies Watched", main="Histogram of % Movies Watched")
mean(rowMeans(movies)) #Average person watched 38% of movies
wss<-c()
max.clusters<-25
for (i in 1:max.clusters) wss[i] <- sum(kmeans(movies, centers=i)$withinss)
plot(1:25, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
num.clusters<-4
set.seed (12345)
movies.k4<-kmeans(movies, num.clusters,nstart=50)
k4.means
kmeans(movies, num.clusters,nstart=50)
1
fitted(movies.k4, method = c("centers", "classes"), ...)
fitted(movies.k4, method = c("centers", "classes"),)
fitted(movies.k4, method = "size",)
k4.means$size
summary(k4.means)
anova(k4.means)
count(k4.means)
summary(movies.k4)
summary(k4.means[order(-k4.means[,3]),]) #Cluster 3 has seen 72% of movies. These are heavy watchers. Small cluster.
summary(k4.means[order(-k4.means[,3]),])
file.choose()
movie.ratings<-read.csv("/Users/landon/Desktop/customer final code/ratings.small.csv")
r.for<-"Erin"
num.recommendations<-2 #the number of recommended movies to return
num.neighbors<-5 #the number of nearest neighbors to use for the calculation
movies.correlation<-cor(data.matrix(movie.ratings[2:21,2:21]), use="pairwise.complete.obs") #you may get an error about Standard deviation = 0...
#This is telling you that for some customers there is no overlap in ratings, so correlation can't be computed and NA is entered.
#order matrix by correlation
nearest.neighbors<-movies.correlation[order(-movies.correlation[,r.for]),r.for,drop=FALSE]
nearest.neighbors<-as.data.frame(nearest.neighbors)
nearest.neighbors
nearest.neighbors<-nearest.neighbors[rownames(nearest.neighbors)!=r.for, , drop=FALSE]
nearest.neighbors
nearest.neighbors<-nearest.neighbors[complete.cases(nearest.neighbors), , drop=FALSE]
#Get k nearest neighbors
nearest.neighbors<-nearest.neighbors[1:num.neighbors, ,drop=FALSE]
nearest.neighbors
weights<-nearest.neighbors/sum(nearest.neighbors)
colnames(weights)<-c("weight")
weights
ratings.neighbors<-t(movie.ratings[,rownames(nearest.neighbors)])
predicted.scores<-c()
for (i in 1:dim(ratings.neighbors)[2]){
predicted.scores[i]<-weighted.mean(ratings.neighbors[,i], t(weights), na.rm=TRUE)
}
predicted.scores<-as.data.frame(predicted.scores)
predicted.scores
rownames(predicted.scores)<-movie.ratings[,1]
predicted.scores
predicted.scores.unseen<-predicted.scores[is.na(movie.ratings[,r.for]), , drop=FALSE]
predicted.scores.unseen<-predicted.scores.unseen[order(-predicted.scores.unseen), ,drop=FALSE]
predicted.scores.unseen
recommendations<-predicted.scores.unseen[1:num.recommendations,,drop=FALSE]
recommendations
summary(k4.means[order(-k4.means[,3]),]) #Cluster 3 has seen 72% of movies. These are heavy watchers. Small cluster.
plot(logistic.quantile.summary$quantile, logistic.quantile.summary$cumlift, type="l", lwd=5, xlab="quantile", ylab="cumulative lift",ylim=c(1,3), xlim=rev(range(logistic.quantile.summary$quantile)))
abline(1,0, col="red", lwd=5)
install.packages('proxy')
library(proxy)
install.packages("proxy")
